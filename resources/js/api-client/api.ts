/* tslint:disable */
/* eslint-disable */
/**
 * Care Mastere API
 * Care Mastere API specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: chinthyelim@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface Company
 */
export interface Company {
	/**
	 *
	 * @type {number}
	 * @memberof Company
	 */
	id: number;
	/**
	 *
	 * @type {string}
	 * @memberof Company
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof Company
	 */
	email: string;
	/**
	 *
	 * @type {string}
	 * @memberof Company
	 */
	logo: string;
	/**
	 *
	 * @type {string}
	 * @memberof Company
	 */
	website: string;
}
/**
 *
 * @export
 * @interface CompanyCreate
 */
export interface CompanyCreate {
	/**
	 *
	 * @type {string}
	 * @memberof CompanyCreate
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyCreate
	 */
	email: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyCreate
	 */
	logo: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyCreate
	 */
	website: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyCreate
	 */
	logoContent: string;
}
/**
 *
 * @export
 * @interface CompanyList
 */
export interface CompanyList {
	/**
	 *
	 * @type {Array<Company>}
	 * @memberof CompanyList
	 */
	data: Array<Company>;
	/**
	 *
	 * @type {number}
	 * @memberof CompanyList
	 */
	total_rows: number;
}
/**
 *
 * @export
 * @interface CompanyUpdate
 */
export interface CompanyUpdate {
	/**
	 *
	 * @type {string}
	 * @memberof CompanyUpdate
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyUpdate
	 */
	email: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyUpdate
	 */
	logo: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyUpdate
	 */
	website: string;
	/**
	 *
	 * @type {string}
	 * @memberof CompanyUpdate
	 */
	logoContent: string;
}
/**
 *
 * @export
 * @interface Employee
 */
export interface Employee {
	/**
	 *
	 * @type {number}
	 * @memberof Employee
	 */
	id: number;
	/**
	 *
	 * @type {string}
	 * @memberof Employee
	 */
	first_name: string;
	/**
	 *
	 * @type {string}
	 * @memberof Employee
	 */
	last_name: string;
	/**
	 *
	 * @type {number}
	 * @memberof Employee
	 */
	company_id: number;
	/**
	 *
	 * @type {string}
	 * @memberof Employee
	 */
	email: string;
	/**
	 *
	 * @type {string}
	 * @memberof Employee
	 */
	phone: string;
	/**
	 *
	 * @type {string}
	 * @memberof Employee
	 */
	company_logo: string;
	/**
	 *
	 * @type {string}
	 * @memberof Employee
	 */
	company_name: string;
}
/**
 *
 * @export
 * @interface EmployeeCreate
 */
export interface EmployeeCreate {
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeCreate
	 */
	first_name: string;
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeCreate
	 */
	last_name: string;
	/**
	 *
	 * @type {number}
	 * @memberof EmployeeCreate
	 */
	company_id: number;
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeCreate
	 */
	email: string;
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeCreate
	 */
	phone: string;
}
/**
 *
 * @export
 * @interface EmployeeList
 */
export interface EmployeeList {
	/**
	 *
	 * @type {Array<Employee>}
	 * @memberof EmployeeList
	 */
	data: Array<Employee>;
	/**
	 *
	 * @type {number}
	 * @memberof EmployeeList
	 */
	total_rows: number;
}
/**
 *
 * @export
 * @interface EmployeeUpdate
 */
export interface EmployeeUpdate {
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeUpdate
	 */
	first_name: string;
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeUpdate
	 */
	last_name: string;
	/**
	 *
	 * @type {number}
	 * @memberof EmployeeUpdate
	 */
	company_id: number;
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeUpdate
	 */
	email: string;
	/**
	 *
	 * @type {string}
	 * @memberof EmployeeUpdate
	 */
	phone: string;
}
/**
 *
 * @export
 * @interface ID
 */
export interface ID {
	/**
	 *
	 * @type {number}
	 * @memberof ID
	 */
	id: number;
}

/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @summary create company
		 * @param {CompanyCreate} CompanyCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createCompany: async (
			CompanyCreate: CompanyCreate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'CompanyCreate' is not null or undefined
			assertParamExists("createCompany", "CompanyCreate", CompanyCreate);
			const localVarPath = `/companies`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				CompanyCreate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary delete company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteCompany: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteCompany", "id", id);
			const localVarPath = `/companies/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get companies
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompanies: async (
			current_page_number?: number,
			rows_per_page?: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/companies`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (current_page_number !== undefined) {
				localVarQueryParameter["current_page_number"] = current_page_number;
			}

			if (rows_per_page !== undefined) {
				localVarQueryParameter["rows_per_page"] = rows_per_page;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompany: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getCompany", "id", id);
			const localVarPath = `/companies/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary update company
		 * @param {number} id
		 * @param {CompanyUpdate} CompanyUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateCompany: async (
			id: number,
			CompanyUpdate: CompanyUpdate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("updateCompany", "id", id);
			// verify required parameter 'CompanyUpdate' is not null or undefined
			assertParamExists("updateCompany", "CompanyUpdate", CompanyUpdate);
			const localVarPath = `/companies/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				CompanyUpdate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		CompaniesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @summary create company
		 * @param {CompanyCreate} CompanyCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createCompany(
			CompanyCreate: CompanyCreate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createCompany(
				CompanyCreate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary delete company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteCompany(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompany(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get companies
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCompanies(
			current_page_number?: number,
			rows_per_page?: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyList>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanies(
				current_page_number,
				rows_per_page,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCompany(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary update company
		 * @param {number} id
		 * @param {CompanyUpdate} CompanyUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateCompany(
			id: number,
			CompanyUpdate: CompanyUpdate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany(
				id,
				CompanyUpdate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = CompaniesApiFp(configuration);
	return {
		/**
		 *
		 * @summary create company
		 * @param {CompaniesApiCreateCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createCompany(
			requestParameters: CompaniesApiCreateCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Company> {
			return localVarFp
				.createCompany(requestParameters.CompanyCreate, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary delete company
		 * @param {CompaniesApiDeleteCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteCompany(
			requestParameters: CompaniesApiDeleteCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deleteCompany(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get companies
		 * @param {CompaniesApiGetCompaniesRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompanies(
			requestParameters: CompaniesApiGetCompaniesRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<CompanyList> {
			return localVarFp
				.getCompanies(
					requestParameters.current_page_number,
					requestParameters.rows_per_page,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get company
		 * @param {CompaniesApiGetCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompany(
			requestParameters: CompaniesApiGetCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Company> {
			return localVarFp
				.getCompany(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary update company
		 * @param {CompaniesApiUpdateCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateCompany(
			requestParameters: CompaniesApiUpdateCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Company> {
			return localVarFp
				.updateCompany(
					requestParameters.id,
					requestParameters.CompanyUpdate,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for createCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCreateCompanyRequest
 */
export interface CompaniesApiCreateCompanyRequest {
	/**
	 *
	 * @type {CompanyCreate}
	 * @memberof CompaniesApiCreateCompany
	 */
	readonly CompanyCreate: CompanyCreate;
}

/**
 * Request parameters for deleteCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiDeleteCompanyRequest
 */
export interface CompaniesApiDeleteCompanyRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CompaniesApiDeleteCompany
	 */
	readonly id: number;
}

/**
 * Request parameters for getCompanies operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetCompaniesRequest
 */
export interface CompaniesApiGetCompaniesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CompaniesApiGetCompanies
	 */
	readonly current_page_number?: number;

	/**
	 *
	 * @type {number}
	 * @memberof CompaniesApiGetCompanies
	 */
	readonly rows_per_page?: number;
}

/**
 * Request parameters for getCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetCompanyRequest
 */
export interface CompaniesApiGetCompanyRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CompaniesApiGetCompany
	 */
	readonly id: number;
}

/**
 * Request parameters for updateCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiUpdateCompanyRequest
 */
export interface CompaniesApiUpdateCompanyRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CompaniesApiUpdateCompany
	 */
	readonly id: number;

	/**
	 *
	 * @type {CompanyUpdate}
	 * @memberof CompaniesApiUpdateCompany
	 */
	readonly CompanyUpdate: CompanyUpdate;
}

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
	/**
	 *
	 * @summary create company
	 * @param {CompaniesApiCreateCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CompaniesApi
	 */
	public createCompany(
		requestParameters: CompaniesApiCreateCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return CompaniesApiFp(this.configuration)
			.createCompany(requestParameters.CompanyCreate, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary delete company
	 * @param {CompaniesApiDeleteCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CompaniesApi
	 */
	public deleteCompany(
		requestParameters: CompaniesApiDeleteCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return CompaniesApiFp(this.configuration)
			.deleteCompany(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get companies
	 * @param {CompaniesApiGetCompaniesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CompaniesApi
	 */
	public getCompanies(
		requestParameters: CompaniesApiGetCompaniesRequest = {},
		options?: AxiosRequestConfig
	) {
		return CompaniesApiFp(this.configuration)
			.getCompanies(
				requestParameters.current_page_number,
				requestParameters.rows_per_page,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get company
	 * @param {CompaniesApiGetCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CompaniesApi
	 */
	public getCompany(
		requestParameters: CompaniesApiGetCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return CompaniesApiFp(this.configuration)
			.getCompany(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary update company
	 * @param {CompaniesApiUpdateCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CompaniesApi
	 */
	public updateCompany(
		requestParameters: CompaniesApiUpdateCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return CompaniesApiFp(this.configuration)
			.updateCompany(
				requestParameters.id,
				requestParameters.CompanyUpdate,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @summary create employee
		 * @param {EmployeeCreate} EmployeeCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createEmployee: async (
			EmployeeCreate: EmployeeCreate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'EmployeeCreate' is not null or undefined
			assertParamExists("createEmployee", "EmployeeCreate", EmployeeCreate);
			const localVarPath = `/employees`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				EmployeeCreate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary delete employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteEmployee: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteEmployee", "id", id);
			const localVarPath = `/employees/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployee: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getEmployee", "id", id);
			const localVarPath = `/employees/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get employees
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployees: async (
			current_page_number?: number,
			rows_per_page?: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/employees`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (current_page_number !== undefined) {
				localVarQueryParameter["current_page_number"] = current_page_number;
			}

			if (rows_per_page !== undefined) {
				localVarQueryParameter["rows_per_page"] = rows_per_page;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary update employee
		 * @param {number} id
		 * @param {EmployeeUpdate} EmployeeUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEmployee: async (
			id: number,
			EmployeeUpdate: EmployeeUpdate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("updateEmployee", "id", id);
			// verify required parameter 'EmployeeUpdate' is not null or undefined
			assertParamExists("updateEmployee", "EmployeeUpdate", EmployeeUpdate);
			const localVarPath = `/employees/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				EmployeeUpdate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		EmployeesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @summary create employee
		 * @param {EmployeeCreate} EmployeeCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createEmployee(
			EmployeeCreate: EmployeeCreate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(
				EmployeeCreate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary delete employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteEmployee(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getEmployee(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get employees
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getEmployees(
			current_page_number?: number,
			rows_per_page?: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeList>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployees(
				current_page_number,
				rows_per_page,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary update employee
		 * @param {number} id
		 * @param {EmployeeUpdate} EmployeeUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateEmployee(
			id: number,
			EmployeeUpdate: EmployeeUpdate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(
				id,
				EmployeeUpdate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = EmployeesApiFp(configuration);
	return {
		/**
		 *
		 * @summary create employee
		 * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createEmployee(
			requestParameters: EmployeesApiCreateEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Employee> {
			return localVarFp
				.createEmployee(requestParameters.EmployeeCreate, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary delete employee
		 * @param {EmployeesApiDeleteEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteEmployee(
			requestParameters: EmployeesApiDeleteEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deleteEmployee(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get employee
		 * @param {EmployeesApiGetEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployee(
			requestParameters: EmployeesApiGetEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Employee> {
			return localVarFp
				.getEmployee(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get employees
		 * @param {EmployeesApiGetEmployeesRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployees(
			requestParameters: EmployeesApiGetEmployeesRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<EmployeeList> {
			return localVarFp
				.getEmployees(
					requestParameters.current_page_number,
					requestParameters.rows_per_page,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary update employee
		 * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEmployee(
			requestParameters: EmployeesApiUpdateEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Employee> {
			return localVarFp
				.updateEmployee(
					requestParameters.id,
					requestParameters.EmployeeUpdate,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for createEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiCreateEmployeeRequest
 */
export interface EmployeesApiCreateEmployeeRequest {
	/**
	 *
	 * @type {EmployeeCreate}
	 * @memberof EmployeesApiCreateEmployee
	 */
	readonly EmployeeCreate: EmployeeCreate;
}

/**
 * Request parameters for deleteEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiDeleteEmployeeRequest
 */
export interface EmployeesApiDeleteEmployeeRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EmployeesApiDeleteEmployee
	 */
	readonly id: number;
}

/**
 * Request parameters for getEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetEmployeeRequest
 */
export interface EmployeesApiGetEmployeeRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EmployeesApiGetEmployee
	 */
	readonly id: number;
}

/**
 * Request parameters for getEmployees operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetEmployeesRequest
 */
export interface EmployeesApiGetEmployeesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EmployeesApiGetEmployees
	 */
	readonly current_page_number?: number;

	/**
	 *
	 * @type {number}
	 * @memberof EmployeesApiGetEmployees
	 */
	readonly rows_per_page?: number;
}

/**
 * Request parameters for updateEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdateEmployeeRequest
 */
export interface EmployeesApiUpdateEmployeeRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EmployeesApiUpdateEmployee
	 */
	readonly id: number;

	/**
	 *
	 * @type {EmployeeUpdate}
	 * @memberof EmployeesApiUpdateEmployee
	 */
	readonly EmployeeUpdate: EmployeeUpdate;
}

/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
export class EmployeesApi extends BaseAPI {
	/**
	 *
	 * @summary create employee
	 * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EmployeesApi
	 */
	public createEmployee(
		requestParameters: EmployeesApiCreateEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return EmployeesApiFp(this.configuration)
			.createEmployee(requestParameters.EmployeeCreate, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary delete employee
	 * @param {EmployeesApiDeleteEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EmployeesApi
	 */
	public deleteEmployee(
		requestParameters: EmployeesApiDeleteEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return EmployeesApiFp(this.configuration)
			.deleteEmployee(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get employee
	 * @param {EmployeesApiGetEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EmployeesApi
	 */
	public getEmployee(
		requestParameters: EmployeesApiGetEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return EmployeesApiFp(this.configuration)
			.getEmployee(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get employees
	 * @param {EmployeesApiGetEmployeesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EmployeesApi
	 */
	public getEmployees(
		requestParameters: EmployeesApiGetEmployeesRequest = {},
		options?: AxiosRequestConfig
	) {
		return EmployeesApiFp(this.configuration)
			.getEmployees(
				requestParameters.current_page_number,
				requestParameters.rows_per_page,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary update employee
	 * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EmployeesApi
	 */
	public updateEmployee(
		requestParameters: EmployeesApiUpdateEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return EmployeesApiFp(this.configuration)
			.updateEmployee(
				requestParameters.id,
				requestParameters.EmployeeUpdate,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * TestPortalApi - axios parameter creator
 * @export
 */
export const TestPortalApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @summary create company
		 * @param {CompanyCreate} CompanyCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createCompany: async (
			CompanyCreate: CompanyCreate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'CompanyCreate' is not null or undefined
			assertParamExists("createCompany", "CompanyCreate", CompanyCreate);
			const localVarPath = `/companies`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				CompanyCreate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary create employee
		 * @param {EmployeeCreate} EmployeeCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createEmployee: async (
			EmployeeCreate: EmployeeCreate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'EmployeeCreate' is not null or undefined
			assertParamExists("createEmployee", "EmployeeCreate", EmployeeCreate);
			const localVarPath = `/employees`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				EmployeeCreate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary delete company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteCompany: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteCompany", "id", id);
			const localVarPath = `/companies/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary delete employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteEmployee: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteEmployee", "id", id);
			const localVarPath = `/employees/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "DELETE",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get companies
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompanies: async (
			current_page_number?: number,
			rows_per_page?: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/companies`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (current_page_number !== undefined) {
				localVarQueryParameter["current_page_number"] = current_page_number;
			}

			if (rows_per_page !== undefined) {
				localVarQueryParameter["rows_per_page"] = rows_per_page;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompany: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getCompany", "id", id);
			const localVarPath = `/companies/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployee: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getEmployee", "id", id);
			const localVarPath = `/employees/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary get employees
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployees: async (
			current_page_number?: number,
			rows_per_page?: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/employees`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (current_page_number !== undefined) {
				localVarQueryParameter["current_page_number"] = current_page_number;
			}

			if (rows_per_page !== undefined) {
				localVarQueryParameter["rows_per_page"] = rows_per_page;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary update company
		 * @param {number} id
		 * @param {CompanyUpdate} CompanyUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateCompany: async (
			id: number,
			CompanyUpdate: CompanyUpdate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("updateCompany", "id", id);
			// verify required parameter 'CompanyUpdate' is not null or undefined
			assertParamExists("updateCompany", "CompanyUpdate", CompanyUpdate);
			const localVarPath = `/companies/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				CompanyUpdate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary update employee
		 * @param {number} id
		 * @param {EmployeeUpdate} EmployeeUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEmployee: async (
			id: number,
			EmployeeUpdate: EmployeeUpdate,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("updateEmployee", "id", id);
			// verify required parameter 'EmployeeUpdate' is not null or undefined
			assertParamExists("updateEmployee", "EmployeeUpdate", EmployeeUpdate);
			const localVarPath = `/employees/{id}`.replace(
				`{${"id"}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "PATCH",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				EmployeeUpdate,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * TestPortalApi - functional programming interface
 * @export
 */
export const TestPortalApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		TestPortalApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @summary create company
		 * @param {CompanyCreate} CompanyCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createCompany(
			CompanyCreate: CompanyCreate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createCompany(
				CompanyCreate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary create employee
		 * @param {EmployeeCreate} EmployeeCreate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createEmployee(
			EmployeeCreate: EmployeeCreate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(
				EmployeeCreate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary delete company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteCompany(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompany(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary delete employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteEmployee(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get companies
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCompanies(
			current_page_number?: number,
			rows_per_page?: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyList>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanies(
				current_page_number,
				rows_per_page,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get company
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCompany(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get employee
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getEmployee(
			id: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary get employees
		 * @param {number} [current_page_number]
		 * @param {number} [rows_per_page]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getEmployees(
			current_page_number?: number,
			rows_per_page?: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeList>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployees(
				current_page_number,
				rows_per_page,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary update company
		 * @param {number} id
		 * @param {CompanyUpdate} CompanyUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateCompany(
			id: number,
			CompanyUpdate: CompanyUpdate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany(
				id,
				CompanyUpdate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @summary update employee
		 * @param {number} id
		 * @param {EmployeeUpdate} EmployeeUpdate
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateEmployee(
			id: number,
			EmployeeUpdate: EmployeeUpdate,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(
				id,
				EmployeeUpdate,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * TestPortalApi - factory interface
 * @export
 */
export const TestPortalApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = TestPortalApiFp(configuration);
	return {
		/**
		 *
		 * @summary create company
		 * @param {TestPortalApiCreateCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createCompany(
			requestParameters: TestPortalApiCreateCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Company> {
			return localVarFp
				.createCompany(requestParameters.CompanyCreate, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary create employee
		 * @param {TestPortalApiCreateEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createEmployee(
			requestParameters: TestPortalApiCreateEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Employee> {
			return localVarFp
				.createEmployee(requestParameters.EmployeeCreate, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary delete company
		 * @param {TestPortalApiDeleteCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteCompany(
			requestParameters: TestPortalApiDeleteCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deleteCompany(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary delete employee
		 * @param {TestPortalApiDeleteEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteEmployee(
			requestParameters: TestPortalApiDeleteEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<void> {
			return localVarFp
				.deleteEmployee(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get companies
		 * @param {TestPortalApiGetCompaniesRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompanies(
			requestParameters: TestPortalApiGetCompaniesRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<CompanyList> {
			return localVarFp
				.getCompanies(
					requestParameters.current_page_number,
					requestParameters.rows_per_page,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get company
		 * @param {TestPortalApiGetCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCompany(
			requestParameters: TestPortalApiGetCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Company> {
			return localVarFp
				.getCompany(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get employee
		 * @param {TestPortalApiGetEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployee(
			requestParameters: TestPortalApiGetEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Employee> {
			return localVarFp
				.getEmployee(requestParameters.id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary get employees
		 * @param {TestPortalApiGetEmployeesRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEmployees(
			requestParameters: TestPortalApiGetEmployeesRequest = {},
			options?: AxiosRequestConfig
		): AxiosPromise<EmployeeList> {
			return localVarFp
				.getEmployees(
					requestParameters.current_page_number,
					requestParameters.rows_per_page,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary update company
		 * @param {TestPortalApiUpdateCompanyRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateCompany(
			requestParameters: TestPortalApiUpdateCompanyRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Company> {
			return localVarFp
				.updateCompany(
					requestParameters.id,
					requestParameters.CompanyUpdate,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary update employee
		 * @param {TestPortalApiUpdateEmployeeRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateEmployee(
			requestParameters: TestPortalApiUpdateEmployeeRequest,
			options?: AxiosRequestConfig
		): AxiosPromise<Employee> {
			return localVarFp
				.updateEmployee(
					requestParameters.id,
					requestParameters.EmployeeUpdate,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for createCompany operation in TestPortalApi.
 * @export
 * @interface TestPortalApiCreateCompanyRequest
 */
export interface TestPortalApiCreateCompanyRequest {
	/**
	 *
	 * @type {CompanyCreate}
	 * @memberof TestPortalApiCreateCompany
	 */
	readonly CompanyCreate: CompanyCreate;
}

/**
 * Request parameters for createEmployee operation in TestPortalApi.
 * @export
 * @interface TestPortalApiCreateEmployeeRequest
 */
export interface TestPortalApiCreateEmployeeRequest {
	/**
	 *
	 * @type {EmployeeCreate}
	 * @memberof TestPortalApiCreateEmployee
	 */
	readonly EmployeeCreate: EmployeeCreate;
}

/**
 * Request parameters for deleteCompany operation in TestPortalApi.
 * @export
 * @interface TestPortalApiDeleteCompanyRequest
 */
export interface TestPortalApiDeleteCompanyRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiDeleteCompany
	 */
	readonly id: number;
}

/**
 * Request parameters for deleteEmployee operation in TestPortalApi.
 * @export
 * @interface TestPortalApiDeleteEmployeeRequest
 */
export interface TestPortalApiDeleteEmployeeRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiDeleteEmployee
	 */
	readonly id: number;
}

/**
 * Request parameters for getCompanies operation in TestPortalApi.
 * @export
 * @interface TestPortalApiGetCompaniesRequest
 */
export interface TestPortalApiGetCompaniesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiGetCompanies
	 */
	readonly current_page_number?: number;

	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiGetCompanies
	 */
	readonly rows_per_page?: number;
}

/**
 * Request parameters for getCompany operation in TestPortalApi.
 * @export
 * @interface TestPortalApiGetCompanyRequest
 */
export interface TestPortalApiGetCompanyRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiGetCompany
	 */
	readonly id: number;
}

/**
 * Request parameters for getEmployee operation in TestPortalApi.
 * @export
 * @interface TestPortalApiGetEmployeeRequest
 */
export interface TestPortalApiGetEmployeeRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiGetEmployee
	 */
	readonly id: number;
}

/**
 * Request parameters for getEmployees operation in TestPortalApi.
 * @export
 * @interface TestPortalApiGetEmployeesRequest
 */
export interface TestPortalApiGetEmployeesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiGetEmployees
	 */
	readonly current_page_number?: number;

	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiGetEmployees
	 */
	readonly rows_per_page?: number;
}

/**
 * Request parameters for updateCompany operation in TestPortalApi.
 * @export
 * @interface TestPortalApiUpdateCompanyRequest
 */
export interface TestPortalApiUpdateCompanyRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiUpdateCompany
	 */
	readonly id: number;

	/**
	 *
	 * @type {CompanyUpdate}
	 * @memberof TestPortalApiUpdateCompany
	 */
	readonly CompanyUpdate: CompanyUpdate;
}

/**
 * Request parameters for updateEmployee operation in TestPortalApi.
 * @export
 * @interface TestPortalApiUpdateEmployeeRequest
 */
export interface TestPortalApiUpdateEmployeeRequest {
	/**
	 *
	 * @type {number}
	 * @memberof TestPortalApiUpdateEmployee
	 */
	readonly id: number;

	/**
	 *
	 * @type {EmployeeUpdate}
	 * @memberof TestPortalApiUpdateEmployee
	 */
	readonly EmployeeUpdate: EmployeeUpdate;
}

/**
 * TestPortalApi - object-oriented interface
 * @export
 * @class TestPortalApi
 * @extends {BaseAPI}
 */
export class TestPortalApi extends BaseAPI {
	/**
	 *
	 * @summary create company
	 * @param {TestPortalApiCreateCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public createCompany(
		requestParameters: TestPortalApiCreateCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.createCompany(requestParameters.CompanyCreate, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary create employee
	 * @param {TestPortalApiCreateEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public createEmployee(
		requestParameters: TestPortalApiCreateEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.createEmployee(requestParameters.EmployeeCreate, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary delete company
	 * @param {TestPortalApiDeleteCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public deleteCompany(
		requestParameters: TestPortalApiDeleteCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.deleteCompany(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary delete employee
	 * @param {TestPortalApiDeleteEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public deleteEmployee(
		requestParameters: TestPortalApiDeleteEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.deleteEmployee(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get companies
	 * @param {TestPortalApiGetCompaniesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public getCompanies(
		requestParameters: TestPortalApiGetCompaniesRequest = {},
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.getCompanies(
				requestParameters.current_page_number,
				requestParameters.rows_per_page,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get company
	 * @param {TestPortalApiGetCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public getCompany(
		requestParameters: TestPortalApiGetCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.getCompany(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get employee
	 * @param {TestPortalApiGetEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public getEmployee(
		requestParameters: TestPortalApiGetEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.getEmployee(requestParameters.id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary get employees
	 * @param {TestPortalApiGetEmployeesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public getEmployees(
		requestParameters: TestPortalApiGetEmployeesRequest = {},
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.getEmployees(
				requestParameters.current_page_number,
				requestParameters.rows_per_page,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary update company
	 * @param {TestPortalApiUpdateCompanyRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public updateCompany(
		requestParameters: TestPortalApiUpdateCompanyRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.updateCompany(
				requestParameters.id,
				requestParameters.CompanyUpdate,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary update employee
	 * @param {TestPortalApiUpdateEmployeeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof TestPortalApi
	 */
	public updateEmployee(
		requestParameters: TestPortalApiUpdateEmployeeRequest,
		options?: AxiosRequestConfig
	) {
		return TestPortalApiFp(this.configuration)
			.updateEmployee(
				requestParameters.id,
				requestParameters.EmployeeUpdate,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
